类 树「
  init（项，深）「
    这。项 = 项；
    这。深 = 深；
    如果（深 大 0）「
      var 项2 = 项 + 项；
      深 = 深 - 1；
      这。左 = 树（项2 - 1，深）；
      这。右 = 树（项2，深）；
    」否则「
      这。左 = 空；
      这。右 = 空；
    」
  」

  check（）「
    如果（这。左 等 空）「
      return 这。项；
    」

    return 这。项 + 这。左。check（）- 这。右。check（）；
  」
」

var minDepth = 4；
var maxDepth = 14；
var stretchDepth = maxDepth + 1；

var start = clock（）；

println（"stretch tree of 深："）；
println（stretchDepth）；
println（"check："）；
println（树（0，stretchDepth）。check（））；

var longLived树 = 树（0，maxDepth）；

// iterations = 2 ** maxDepth
var iterations = 1；
var d = 0；
循环（d 小 maxDepth）「
  iterations = iterations * 2；
  d = d + 1；
」

var 深 = minDepth；
循环（深 小 stretchDepth）「
  var check = 0；
  var i = 1；
  循环（i 小等 iterations）「
    check = check + 树（i，深）。check（）+ 树（-i，深）。check（）；
    i = i + 1；
  」

  println（"num trees："）；
  println（iterations * 2）；
  println（"深："）；
  println（深）；
  println（"check："）；
  println（check）；

  iterations = iterations / 4；
  深 = 深 + 2；
」

println（"long lived tree of 深："）；
println（maxDepth）；
println（"check："）；
println（longLived树。check（））；
println（"elapsed："）；
println（clock（）- start）；
